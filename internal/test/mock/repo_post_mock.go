// Code generated by MockGen. DO NOT EDIT.
// Source: post.go

// Package post is a generated GoMock package.
package mock

import (
	"github.com/vlasdash/redditclone/internal/post"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockPostRepo is a mock of PostRepo interface.
type MockPostRepo struct {
	ctrl     *gomock.Controller
	recorder *MockPostRepoMockRecorder
}

// MockPostRepoMockRecorder is the mock recorder for MockPostRepo.
type MockPostRepoMockRecorder struct {
	mock *MockPostRepo
}

// NewMockPostRepo creates a new mock instance.
func NewMockPostRepo(ctrl *gomock.Controller) *MockPostRepo {
	mock := &MockPostRepo{ctrl: ctrl}
	mock.recorder = &MockPostRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPostRepo) EXPECT() *MockPostRepoMockRecorder {
	return m.recorder
}

// AddComment mocks base method.
func (m *MockPostRepo) AddComment(postID, commentID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddComment", postID, commentID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddComment indicates an expected call of AddComment.
func (mr *MockPostRepoMockRecorder) AddComment(postID, commentID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddComment", reflect.TypeOf((*MockPostRepo)(nil).AddComment), postID, commentID)
}

// Create mocks base method.
func (m *MockPostRepo) Create(post *post.Post) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", post)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockPostRepoMockRecorder) Create(post interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockPostRepo)(nil).Create), post)
}

// Delete mocks base method.
func (m *MockPostRepo) Delete(postID string, userID uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", postID, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockPostRepoMockRecorder) Delete(postID, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockPostRepo)(nil).Delete), postID, userID)
}

// DeleteComment mocks base method.
func (m *MockPostRepo) DeleteComment(postID, commentID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteComment", postID, commentID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteComment indicates an expected call of DeleteComment.
func (mr *MockPostRepoMockRecorder) DeleteComment(postID, commentID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteComment", reflect.TypeOf((*MockPostRepo)(nil).DeleteComment), postID, commentID)
}

// Downvote mocks base method.
func (m *MockPostRepo) Downvote(postID string, voter uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Downvote", postID, voter)
	ret0, _ := ret[0].(error)
	return ret0
}

// Downvote indicates an expected call of Downvote.
func (mr *MockPostRepoMockRecorder) Downvote(postID, voter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Downvote", reflect.TypeOf((*MockPostRepo)(nil).Downvote), postID, voter)
}

// GetAll mocks base method.
func (m *MockPostRepo) GetAll() ([]*post.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]*post.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockPostRepoMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockPostRepo)(nil).GetAll))
}

// GetByAuthor mocks base method.
func (m *MockPostRepo) GetByAuthor(id uint) ([]*post.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByAuthor", id)
	ret0, _ := ret[0].([]*post.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByAuthor indicates an expected call of GetByAuthor.
func (mr *MockPostRepoMockRecorder) GetByAuthor(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByAuthor", reflect.TypeOf((*MockPostRepo)(nil).GetByAuthor), id)
}

// GetByCategory mocks base method.
func (m *MockPostRepo) GetByCategory(category string) ([]*post.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByCategory", category)
	ret0, _ := ret[0].([]*post.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByCategory indicates an expected call of GetByCategory.
func (mr *MockPostRepoMockRecorder) GetByCategory(category interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByCategory", reflect.TypeOf((*MockPostRepo)(nil).GetByCategory), category)
}

// GetByID mocks base method.
func (m *MockPostRepo) GetByID(id string, viewsUpdate int) (*post.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", id, viewsUpdate)
	ret0, _ := ret[0].(*post.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockPostRepoMockRecorder) GetByID(id, viewsUpdate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockPostRepo)(nil).GetByID), id, viewsUpdate)
}

// Unvote mocks base method.
func (m *MockPostRepo) Unvote(postID string, voter uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unvote", postID, voter)
	ret0, _ := ret[0].(error)
	return ret0
}

// Unvote indicates an expected call of Unvote.
func (mr *MockPostRepoMockRecorder) Unvote(postID, voter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unvote", reflect.TypeOf((*MockPostRepo)(nil).Unvote), postID, voter)
}

// Upvote mocks base method.
func (m *MockPostRepo) Upvote(postID string, voter uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upvote", postID, voter)
	ret0, _ := ret[0].(error)
	return ret0
}

// Upvote indicates an expected call of Upvote.
func (mr *MockPostRepoMockRecorder) Upvote(postID, voter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upvote", reflect.TypeOf((*MockPostRepo)(nil).Upvote), postID, voter)
}
